{"version":3,"sources":["./src/app/components/answer-input-base/array-answer-input/index.ts","./src/app/components/answer-input-base/multi-choices-multi-options/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAsF;AAEtF;IACE,sBAAY,OAAc,EAAE,cAAqB,EAAE,UAAwC;QACzF,IAAM,WAAW,GAAG,EAAE,CAAC;QAEvB,OAAO,CAAC,OAAO,CAAC,gBAAM;YACpB,IAAM,MAAM,GAAG,cAAc,CAAC,IAAI,CAAC,WAAC,IAAI,QAAC,CAAC,0BAA0B,KAAK,MAAM,CAAC,EAAE,EAA1C,CAA0C,CAAC,CAAC;YACpF,WAAW,CAAC,MAAM,CAAC,EAAE,CAAC,GAAG,IAAI,0DAAW,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,oBAAoB,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;QAC7F,CAAC,CAAC,CAAC;QAEH,OAAO,IAAI,wDAAS,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC;IAChD,CAAC;IACH,mBAAC;AAAD,CAAC;;AAEM,SAAS,0BAA0B,CAAC,CAAkB;IAE3D,KAAK,IAAM,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE;QACvB,IAAI,CAAC,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE;YAC5C,OAAO;gBACL,UAAU,EAAE,IAAI;aACjB,CAAC;SACH;KACF;IAED,OAAO,IAAI,CAAC;AACd,CAAC;;;;;;;;;;;;;;;;;;;;AC1B+E;AAEhF;IACE,6BAAY,OAAc,EAAE,cAAqB,EAAE,UAAkB,EAAE,UAAwC;QAC7G,IAAM,WAAW,GAAG,EAAE,CAAC;QAEvB,OAAO,CAAC,GAAG,CAAC,cAAI;YACd,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,GAAG,IAAI,0DAAW,CAAC,cAAc,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QACnG,CAAC,CAAC,CAAC;QACH,OAAO,IAAI,wDAAS,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC;IAChD,CAAC;IACH,0BAAC;AAAD,CAAC;;AAEM,SAAS,iCAAiC,CAAC,GAAW;IAC3D,IAAM,SAAS,GAAgB,UAAC,SAAoB;QAClD,IAAI,aAAa,GAAG,CAAC,CAAC;QACtB,KAAK,IAAM,GAAG,IAAI,SAAS,CAAC,KAAK,EAAE;YACjC,IAAI,SAAS,CAAC,KAAK,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,EAAE,aAAa,IAAI,GAAG,EAAE;gBACzF,OAAO,IAAI,CAAC;aACb;SACF;QAED,IAAI,aAAa,GAAG,CAAC,EAAE;YACrB,OAAO,EAAE,eAAe,EAAE,IAAI,EAAE,CAAC;SAClC;QACD,OAAO,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;IAC7B,CAAC,CAAC;IAEF,OAAO,SAAS,CAAC;AACnB,CAAC","file":"common.js","sourcesContent":["import { FormControl, FormGroup, ValidatorFn, AbstractControl } from '@angular/forms';\n\nexport class ArrayControl {\n  constructor(options: any[], optionsAnswers: any[], validators?: ValidatorFn | ValidatorFn[]) {\n    const groupObject = {};\n\n    options.forEach(option => {\n      const answer = optionsAnswers.find(a => a.question_answer_options_id === option.id);\n      groupObject[option.id] = new FormControl(answer ? answer.label_set_options_id : undefined);\n    });\n\n    return new FormGroup(groupObject, validators);\n  }\n}\n\nexport function ArrayTypeRequiredValidator(c: AbstractControl) {\n\n  for (const k in c.value) {\n    if (c.value.hasOwnProperty(k) && !c.value[k]) {\n      return {\n        allOptions: true\n      };\n    }\n  }\n\n  return null;\n}\n","import { FormControl, ValidatorFn, FormGroup, FormArray } from '@angular/forms';\n\nexport class MultiOptionsControl {\n  constructor(options: any[], selectedValues: any[], valueField: string, validators?: ValidatorFn | ValidatorFn[]) {\n    const groupObject = {};\n\n    options.map(item => {\n      groupObject[item[valueField]] = new FormControl(selectedValues.indexOf(item[valueField]) !== -1);\n    });\n    return new FormGroup(groupObject, validators);\n  }\n}\n\nexport function MultiOptionsTypeRequiredValidator(min: number) {\n  const validator: ValidatorFn = (formArray: FormArray) => {\n    let selectedCount = 0;\n    for (const key in formArray.value) {\n      if (formArray.value.hasOwnProperty(key) && formArray.value[key] && ++selectedCount >= min) {\n        return null;\n      }\n    }\n\n    if (selectedCount > 0) {\n      return { requiredOptions: true };\n    }\n    return { oneOption: true };\n  };\n\n  return validator;\n}\n"],"sourceRoot":"webpack:///"}